project:
  fields:
  - name: project_number
    type: string
    factory: |
      { Date.strptime((0..20).to_a.sample.years.ago.to_s,"%Y-%m-%d %H:%M:%S %Z").strftime("%Y%m%d") + "." + (Faker::Base::ULetters.sample)+ (Faker::Base::ULetters.sample)+ (Faker::Base::ULetters.sample)}
  - name: img
    type: string
    factory: |
      { "http://notionparallax.co.uk/bldg/bld-" + (0..248).to_a.sample.to_s +".jpg" }


non_building:
  fields:
  - name: name
    type: string
    factory: |
      { Faker::Company.bs }
  - name: description
    type: text
    factory: |
      { Faker::Lorem.paragraphs(2).join('<br>') }
  relation:
    parent: project
    type: embeds_one

building:
  fields:
  - name: description
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: attribution
    type: string
    factory: |
      { "TODO: I don't remember why this field  exists" }
  - name: BCA_classification
    type: string
    factory: |
      { "Class " + ["1","1A","1B","2","3","4","5","6","7","8","9","9A","9B","9C","10","10A","10B"].sample }
  - name: project_catagories
    type: array
    factory: |
      { Faker::Name.first_name + ", "+Faker::Name.first_name + ", " + Faker::Name.first_name }
  - name: project_sub_catagories
    type: array
    factory: |
      { Faker::Name.first_name + ", "+Faker::Name.first_name + ", " + Faker::Name.first_name }
  relation:
    parent: project
    type: embeds_one

location:
  fields: []
  relation:
    parent: building
    type: embeds_many

geo_json:
  fields:
  - name: lat
    type: float
    factory: |
      { (-155..110).to_a.sample + rand }
  - name: lon
    type: float
    factory: |
      { (-45..-10).to_a.sample + rand }
  - name: boundary_points
    type: array
    factory: |
      { [[(-155..110).to_a.sample + rand, (-45..-10).to_a.sample + rand],[(-155..110).to_a.sample + rand, (-45..-10).to_a.sample + rand],[(-155..110).to_a.sample + rand, (-45..-10).to_a.sample + rand],[(-155..110).to_a.sample + rand, (-45..-10).to_a.sample + rand]] }
  relation:
    parent: location
    type: embeds_one

address:
  fields:
  - name: building_name
    type: string
    factory: |
      { Faker::Name.first_name + " Building"}
  - name: street_number
    type: string
    factory: |
      { Faker::Address.building_number }
  - name: street
    type: string
    factory: |
      { Faker::Address.street_name + " " + Faker::Address.street_suffix}
  - name: suburb_area
    type: string
    factory: |
      { ["Eagle Vale", "Earlwood", "East Gordon", "East Hills", "East Killara", "East Lindfield", "East Ryde", "East Sydney", "Eastern Creek", "Eastgardens", "Eastlakes", "Eastwood", "Edensor Park", "Edgecliff", "Edmondson Park", "Elanora Heights", "Elderslie", "Elizabeth Bay", "Ellis Lane", "Elvina Bay", "Emerton", "Emu Heights", "Emu Plains", "Enfield", "Engadine", "Englorie Park", "Enmore", "Epping", "Ermington", "Erskine Park", "Erskineville", "Eschol Park", "Eveleigh"].sample}
  - name: state_county
    type: string
    factory: |
      { ["Ashmore and Cartier Islands","Australian Antarctic Territory","Australian Capital Territory","Christmas Island  Christmas Island","Cocos (Keeling) Islands  Cocos (Keeling) Islands","Coral Sea Islands","Heard Island and McDonald Islands","Jervis Bay Territory","New South Wales","Norfolk Island","Northern Territory","Queensland  Queensland","South Australia","Tasmania","Victoria","Western Australia"].sample }
  - name: country
    type: string
    factory: |
      {  Faker::Address.country }
  - name: postcode
    type: string
    factory: |
      { Faker::Address.postcode}
  relation:
    parent: location
    type: embeds_many

project_source:
  fields:
  - name: competition_win
    type: boolean
    factory: |
      { [true,false].sample }
  - name: competition_URL
    type: string
    factory: |
      { 'http://' + Faker::Internet.domain_name + '/project-offers/' }
  relation:
    parent: building
    type: embeds_one

referred_by:
  fields:
  - name: BVN_staff_login
    type: string
    factory: |
      { (Faker::Base::ULetters.sample + Faker::Name.last_name ).downcase }
  - name: contact_name
    type: string
    factory: |
      { Faker::Name.name }
  - name: contact_organisation
    type: string
    factory: |
      { Faker::Name.name + "Institute" }
  relation:
    parent: project_source
    type: embeds_one

dimension_group:
  fields:
  - name: dirty_size
    type: string
    factory: |
      "one thousand metres squared"
  relation:
    parent: building
    type: embeds_one
    synonym: dims

height:
  fields:
  - name: measurement
    type: float
    factory: |
      { rand * 800 }
  - name: standard_name
    type: string
    factory: |
      { ["Highest occupied floor", "top of radio mast"].sample }
  - name: standard_version
    type: string
    factory: |
      { "V"+(1..5).to_a.sample.to_s }
  relation:
    parent: dimension_group
    type: embeds_one

footprint_area:
  fields:
  - name: measurement
    type: float
    factory: |
      { rand * 80000 }
  - name: standard_name
    type: string
    factory: |
      { ["BC", "IOS", "RM"].sample +  ["USA", "AU", "UK"].sample}
  - name: standard_version
    type: string
    factory: |
      { "V"+(1..5).to_a.sample.to_s }
  relation:
    parent: dimension_group
    type: embeds_one

gross_building_area:
  fields:
  - name: measurement
    type: float
    factory: |
      { rand * 80000  }
  - name: standard_name
    type: string
    factory: |
      { ["BC", "IOS", "RM"].sample +  ["USA", "Au", "UK"].sample}
  - name: standard_version
    type: string
    factory: |
      { "V"+(1..5).to_a.sample.to_s }
  relation:
    parent: dimension_group
    type: embeds_one
    synonym: gba

gross_floor_area:
  fields:
  - name: measurement
    type: float
    factory: |
      { rand * 80000  }
  - name: standard_name
    type: string
    factory: |
      { ["BC", "IOS", "RM"].sample +  ["USA", "Au", "UK"].sample}
  - name: standard_version
    type: string
    factory: |
      { "V"+(1..5).to_a.sample.to_s }
  relation:
    parent: dimension_group
    type: embeds_one
    synonym: gfa

net_lettable_area:
  fields:
  - name: measurement
    type: float
    factory: |
      { rand * 80000  }
  - name: standard_name
    type: string
    factory: |
      { ["BC", "IOS", "RM"].sample +  ["USA", "Au", "UK"].sample}
  - name: standard_version
    type: string
    factory: |
      { "V"+(1..5).to_a.sample.to_s }
  relation:
    parent: dimension_group
    type: embeds_one
    synonym: nla

client:
  fields:
  - name: main
    type: string
    factory: |
      { Faker::Name.name }
  - name: direct
    type: string
    factory: |
      { Faker::Name.name  }
  - name: end_user
    type: string
    factory: |
      { Faker::Name.name  }
  relation:
    parent: building
    type: embeds_one

relationship_description:
  fields:
  - name: client
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: stakeholder
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: councils
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  relation:
    parent: building
    type: embeds_one

phase:
  fields:
  - name: dirty_members
    type: string
    factory: |
      { [Faker::Name.first_name,Faker::Name.first_name,Faker::Name.first_name].join ', ' }
  - name: project_name
    type: string
    factory: |
      { Faker::Commerce.product_name + " " + ["base", "tower", "building", "Labs"].sample}
  - name: studio
    type: string
    factory: |
      { ['Brisbane', 'Sydney', 'Canberra', 'Auckland', 'Bangkok', 'London', 'Melbourne', 'Townsville'].sample }
  - name: client
    type: string
    factory: |
      { Faker::Company.name }
  - name: services_scope
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: delivery_contract
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: staff_contact_login
    type: string
    factory: |
      { (Faker::Base::ULetters.sample + Faker::Name.last_name ).downcase }
  - name: staff_custodian_login
    type: string
    factory: |
      { (Faker::Base::ULetters.sample + Faker::Name.last_name ).downcase }
  - name: dirty_date
    type: string
    factory: |
      "Projected completion 2005"
  # from key_date
  - name: start_date
    type: date
    factory: |
      { (10..20).to_a.sample.years.ago + (1..345).to_a.sample.days }
  - name: end_date
    type: date
    factory: |
      { (0..10).to_a.sample.years.ago + (1..345).to_a.sample.days }
  # from budget
  - name: initial_phase_value_total
    type: float
    factory: |
      { (rand*100).floor*1000000 }
  - name: final_phase_value_total
    type: float
    factory: |
      { (rand*100).floor*1000000 }
  - name: initial_phase_fee_total
    type: float
    factory: |
      { (rand*100).floor*1000000 }
  - name: final_phase_fee_total
    type: float
    factory: |
      { (rand*100).floor*1000000 }
  - name: construction_initial
    type: float
    factory: |
      { (rand*100).floor*1000000 }
  - name: construction_final
    type: float
    factory: |
      { (rand*100).floor*1000000 }
  - name: comments
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: fee_type
    type: string
    factory: |
      { ["fixed fee", "lump sum", "hourly"].sample }
  relation:
    parent: building
    type: embeds_many

#key_date:
#  fields:
#  - name: start_date
#    type: date
#    factory: |
#      { (10..20).to_a.sample.years.ago + (1..345).to_a.sample.days }
#  - name: end_date
#    type: date
#    factory: |
#      { (0..10).to_a.sample.years.ago + (1..345).to_a.sample.days }
#  relation:
#    parent: phase
#    type: embeds_one

# TODO support nested plural sub properties
#other_date:
#  fields:
#  - name: date
#    type: date
#    factory: |
#      { (0..20).to_a.sample.years.ago + (1..345).to_a.sample.days }
#  - name: description
#    type: string
#    factory: |
#      { Faker::Company.catch_phrase }
#  relation:
#    parent: key_date
#    type: embeds_many

#budget:
#  fields:
#  - name: initial_phase_value_total
#    type: float
#    factory: |
#      { (rand*100).floor*1000000 }
#  - name: final_phase_value_total
#    type: float
#    factory: |
#      { (rand*100).floor*1000000 }
#  - name: initial_phase_fee_total
#    type: float
#    factory: |
#      { (rand*100).floor*1000000 }
#  - name: final_phase_fee_total
#    type: float
#    factory: |
#      { (rand*100).floor*1000000 }
#  - name: construction_initial
#    type: float
#    factory: |
#      { (rand*100).floor*1000000 }
#  - name: construction_final
#    type: float
#    factory: |
#      { (rand*100).floor*1000000 }
#  - name: comments
#    type: text
#    factory: |
#      { Faker::Lorem.paragraphs.join('<br>') }
#  - name: fee_type
#    type: string
#    factory: |
#      { ["fixed fee", "lump sum", "hourly"].sample }
#  relation:
#    parent: phase
#    type: embeds_one

legacy:
  fields:
  - name: one_line_grab
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: description_project_sheet
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: description_awards_style
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: innovation_client_style
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: interesting_things
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: brief_elements
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: security_level
    type: string
    factory: |
      { ['Top Secret', 'Licence to Kill', 'Double Secret Probation', 'Baseline'].sample }
  relation:
    parent: building
    type: embeds_one

environmental_sustainable_design:
  fields: []
  relation:
    parent: legacy
    type: embeds_one
    synonym: esd

initiative:
  fields:
  - name: title
    type: string
    factory: |
      { ["wind turbine", "magic glass", "green roof"].sample }
  - name: reason
    type: string
    factory: |
      { Faker::Lorem.sentence }
  - name: description
    type: text
    factory: |
      { Faker::Lorem.paragraphs(2).join('<br>') }
  relation:
    parent: environmental_sustainable_design
    type: embeds_many

certification:
  fields:
  - name: name
    type: string
    factory: |
      { ["NABERS", "GBCA", "Carbon Buzz"].sample + ["designed", "built", "imagined"].sample}
  - name: ranking
    type: string
    factory: |
      { ["***", "****", "******"].sample }
  - name: awarding_body
    type: string
    factory: |
      { ["NABERS", "GBCA", "Carbon Buzz"].sample }
  - name: expiry_date
    type: date
    factory: |
      { (0..20).to_a.sample.years.ago + (1..345).to_a.sample.days }
  relation:
    parent: environmental_sustainable_design
    type: embeds_many

photography:
  fields:
  - name: photographer
    type: string
    factory: |
      { Faker::Name.name  }
  - name: date
    type: date
    factory: |
      { (0..20).to_a.sample.years.ago + (1..345).to_a.sample.days }
  relation:
    parent: legacy
    type: embeds_one

award:
  fields:
  - name: award
    type: string
    factory: |
      { Faker::Company.catch_phrase }
  - name: date
    type: date
    factory: |
      { (0..20).to_a.sample.years.ago + (1..345).to_a.sample.days }
  - name: jury
    type: array
    factory: |
      { [Faker::Name.name,Faker::Name.name,Faker::Name.name ,Faker::Name.name].join ', ' }
  relation:
    parent: legacy
    type: embeds_many

testimonial:
  fields:
  - name: testimonial
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>')  }
  - name: date
    type: date
    factory: |
      { (0..20).to_a.sample.years.ago + (1..345).to_a.sample.days }
  - name: citation
    type: string
    factory: |
      { Faker::Name.name  }
  relation:
    parent: legacy
    type: embeds_many

quote:
  fields:
  - name: quote
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  - name: date
    type: date
    factory: |
      { (0..20).to_a.sample.years.ago + (1..345).to_a.sample.days }
  - name: citation
    type: string
    factory: |
      { Faker::Name.name  }
  relation:
    parent: legacy
    type: embeds_many

building_press:
  fields: []
  relation:
    parent: building
    type: embeds_many
    synonym: press

building_attention:
  fields:
  - name: date
    type: date
    factory: |
      { (0..10).to_a.sample.years.ago + (1..345).to_a.sample.days }
  - name: url
    type: string
    factory: |
      { 'http://'+ Faker::Internet.domain_name + '/stories/' + ['style_section','business','theatre'].sample }
  - name: scan_or_screengrab
    type: string
    factory: |
      { 'http://'+ Faker::Internet.domain_name + '/images/' + Faker::Number.number(20) + 'screencap.jpg' }
  - name: body_text
    type: text
    factory: |
      { Faker::Lorem.paragraphs(paragraph_count = 8).join('<br>') }
  - name: publication
    type: string
    factory: |
      { Faker::Company.bs + ' weekly' }
  - name: reason
    type: string
    factory: |
      { ['reactive', 'planned', 'response to release'].sample }
  relation:
    parent: building_press
    type: embeds_many
    synonym: attention

campaign:
  fields:
  - name: strategy
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  relation:
    parent: building_press
    type: embeds_many

# TODO fix editable
#building_press_release:
#  fields:
#  - name: date
#    type: date
#    factory: |
#      { (10..20).to_a.sample.years.ago + (1..345).to_a.sample.days }
#  - name: channel_list
#    type: string
#    factory: |
#      { Faker::Company.name + " " + "professional targetted marketing" }
#  - name: content
#    type: text
#    factory: |
#      { Faker::Lorem.paragraphs.join('<br>') }
#  - name: author_login
#    type: string
#    factory: |
#      { (Faker::Base::ULetters.sample + Faker::Name.last_name ).downcase }
#  relation:
#    parent: campaign
#    type: embeds_many

quality_assurance:
  fields:
  - name: notes
    type: text
    factory: |
      { Faker::Lorem.paragraphs.join('<br>') }
  relation:
    parent: building
    type: embeds_many
    synonym: qa
